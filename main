// main


require('prototype.spawner')();

var roleUpgrader = require('role.upgrader');
var roleHarvester = require('role.harvester');
var roleBuilder = require('role.builder');
var roleCaretaker = require('role.caretaker');

module.exports.loop = function() {
    
    // check for memory entries of dead creeps by iterating over Memory.creeps
    for (let name in Memory.creeps) {
        // and checking if the creep is still alive
        if (Game.creeps[name] == undefined) {
            // if not, delete the memory entry
            delete Memory.creeps[name];
        }else if (Game.time % 5 == 0){
            Game.creeps[name].say(Game.creeps[name].memory.role);
        }else if (Game.creeps[name].fatigue > 0){
            Game.creeps[name].say("Tired!");
        }
    }

    var thisRoom = Game.spawns.Spawn1.room;
    const exits = Game.map.describeExits(thisRoom.name);

    var targetRoom = undefined;
    for (let exit in exits){
        var neighbour = exits[exit];

        if (Game.map.isRoomAvailable(neighbour)){
            targetRoom = neighbour;
            break;
        }
    }

    var numUpgraders = _.sum(Game.creeps,(c) => c.memory.role == 'upgrader');
    var numHarvesters = _.sum(Game.creeps,(c) => c.memory.role == 'harvester');
    var numBuilders= _.sum(Game.creeps,(c) => c.memory.role == 'builder');
    var numCaretakers= _.sum(Game.creeps,(c) => c.memory.role == 'caretaker');
    var numClaimers= _.sum(Game.creeps,(c) => c.memory.role == 'claimers');

    var targetUpgraders = 1
    var targetHarvesters = 4
    var targetBuilders = 1
    var targetCaretakers = 2
    var targetClaimers = 1

 //   console.log("Harvesters = "+numHarvesters+"/"+targetHarvesters);   
 //   console.log("Upgraders = "+numUpgraders+"/"+targetUpgraders);
 //   console.log("Builders = "+numBuilders+"/"+targetBuilders);
 //   console.log("Caretakers = "+numCaretakers+"/"+targetCaretakers);


    var energy = thisRoom.energyCapacityAvailable;

 //   console.log("Energy:"+thisRoom.energyAvailable+"/"+thisRoom.energyCapacityAvailable);

    if ( numHarvesters < targetHarvesters ){
        var ret = Game.spawns.Spawn1.createCustomCreep(energy, 'harvester');
    }else if ( numUpgraders < targetUpgraders ){
        Game.spawns.Spawn1.createCustomCreep(energy, 'upgrader');
    }else if ( numBuilders < targetBuilders ){
        Game.spawns.Spawn1.createCustomCreep(energy, 'builder');
    }else if ( numCaretakers < targetCaretakers ){
        Game.spawns.Spawn1.createCustomCreep(energy, 'caretaker');
    }else if ( numClaimers < targetClaimers ){
        Game.spawns.Spawn1.createCustomCreep(energy, 'claimer', targetRoom);
    }

    for (let name in Game.creeps){
        var creep = Game.creeps[name];

        if (creep.memory.role == 'upgrader'){
            roleUpgrader.run(creep);
        }

        if (creep.memory.role == 'harvester'){
            roleHarvester.run(creep);
        }

        if (creep.memory.role == 'builder'){
            roleBuilder.run(creep);
        }

        if (creep.memory.role == 'caretaker'){
            roleCaretaker.run(creep);
        }

    }

    var hostiles = thisRoom.find(FIND_HOSTILE_CREEPS);
    var towers = thisRoom.find(FIND_MY_STRUCTURES, {filter: {structureType: STRUCTURE_TOWER}});
    towers.forEach(tower => tower.attack(hostiles[0]));


}
