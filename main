// main

var roleUpgrader = require('role.upgrader');
var roleHarvester = require('role.harvester');
var roleBuilder = require('role.builder');

module.exports.loop = function() {
    
    // check for memory entries of dead creeps by iterating over Memory.creeps
    for (let name in Memory.creeps) {
        // and checking if the creep is still alive
        if (Game.creeps[name] == undefined) {
            // if not, delete the memory entry
            delete Memory.creeps[name];
        }else if (Game.time % 5 == 0){
            Game.creeps[name].say(Game.creeps[name].memory.role);
        }
    }

    var numUpgraders = _.sum(Game.creeps,(c) => c.memory.role == 'upgrader');
    var numHarvesters = _.sum(Game.creeps,(c) => c.memory.role == 'harvester');
    var numBuilders= _.sum(Game.creeps,(c) => c.memory.role == 'builder');

    var targetUpgraders = 1
    var targetHarvesters = 5
    var targetBuilders = 4

    console.log("Harvesters = "+numHarvesters+"/"+targetHarvesters);   
    console.log("Upgraders = "+numUpgraders+"/"+targetUpgraders);
    console.log("Builders = "+numBuilders+"/"+targetBuilders);

    var energy = Game.spawns.Spawn1.room.energyCapacityAvailable;

    if ( numHarvesters < targetHarvesters ){
        console.log("attempting to spawn Harvester");
        Game.spawns.Spawn1.createCustomCreep(energy, 'harvester');
    }else if ( numUpgraders < targetUpgraders ){
        console.log("attempting to spawn Upgrader");
        Game.spawns.Spawn1.createCustomCreep(energy, 'harvester');
    }else if ( numBuilders < targetBuilders ){
        console.log("attempting to spawn Builder");
        Game.spawns.Spawn1.createCustomCreep(energy, 'harvester');
    }

    for (let name in Game.creeps){
        var creep = Game.creeps[name];

        if (creep.memory.role == 'upgrader'){
            roleUpgrader.run(creep);
        }

        if (creep.memory.role == 'harvester'){
            roleHarvester.run(creep);
        }

        if (creep.memory.role == 'builder'){
            roleBuilder.run(creep);
        }
    }

}
